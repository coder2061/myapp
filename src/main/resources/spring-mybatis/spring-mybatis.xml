<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	    http://www.springframework.org/schema/util
	    http://www.springframework.org/schema/util/spring-util-3.2.xsd">
    
    <!-- 引入配置文件 -->  
    <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean> -->
	<context:property-placeholder location="classpath:jdbc.properties" />
    <!--创建jdbc数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName -->
		<property name="driverClassName" value="${druid.driverClassName}" />
		<property name="url" value="${druid.url}" />
		<property name="username" value="${druid.username}" />
		<property name="password" value="${druid.password}" />
		<!-- 初始化连接个数 初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${druid.minIdle}" />
		<!-- 连接池最大连接数 -->
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 对于长时间不使用的连接强制关闭 -->
		<property name="removeAbandoned" value="${druid.removeAbandoned}" />
		<!-- 清理无用连接的等待时间 -->
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<!-- 是否缓存preparedStatement，也就是PSCache。
			并且指定每个连接上PSCache的大小 PSCache对支持游标的数据库性能提升巨大，比如说oracle。 
			如果用Oracle，把poolPreparedStatements配置为true 在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}" />
		<!-- 连接属性 -->
		<property name="connectionProperties" value="druid.connectionProperties" />
	</bean>
	<!--创建原始数据源origin-jdbc -->
	<bean id="originDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  
	       <property name="driverClass" value="${origin.driver}" />  
	       <property name="jdbcUrl" value="${origin.url}" />  
	       <property name="user" value="${origin.username}" />  
	       <property name="password" value="${origin.password}" />  
  		   <property name="minPoolSize" value="${minPoolSize}" />  
		   <property name="maxPoolSize" value="${maxPoolSize}" />
		   <property name="maxIdleTime" value="${maxIdleTime}" />
		   <property name="acquireIncrement" value="${acquireIncrement}" />
		   <property name="maxStatements" value="${maxStatements}" />
		   <property name="initialPoolSize" value="${initialPoolSize}" />
		   <property name="acquireRetryAttempts" value="${acquireRetryAttempts}" />
		   <property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}" />
		   <property name="testConnectionOnCheckout" value="${testConnectionOnCheckout}" />
		   <property name="checkoutTimeout" value="${checkoutTimeout}" />
	</bean>  
	<!--创建目标数据源goal-jdbc --> 
	<bean id="goalDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  
	       <property name="driverClass" value="${goal.driver}" />  
	       <property name="jdbcUrl" value="${goal.url}" />  
	       <property name="user" value="${goal.username}" />  
	       <property name="password" value="${goal.password}" />  
  		   <property name="minPoolSize" value="${minPoolSize}" />  
		   <property name="maxPoolSize" value="${maxPoolSize}" />
		   <property name="maxIdleTime" value="${maxIdleTime}" />
		   <property name="acquireIncrement" value="${acquireIncrement}" />
		   <property name="maxStatements" value="${maxStatements}" />
		   <property name="initialPoolSize" value="${initialPoolSize}" />
		   <property name="acquireRetryAttempts" value="${acquireRetryAttempts}" />
		   <property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}" />
		   <property name="testConnectionOnCheckout" value="${testConnectionOnCheckout}" />
		   <property name="checkoutTimeout" value="${checkoutTimeout}" />
	</bean>
	
	<!-- 多数据源配置管理 -->
	<!-- 
	<bean id="multipleDataSource" class="com.zaicent.datasource.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="dataSource"/>
        <property name="targetDataSources">
            <map>
                <entry key="dataSource" value-ref="dataSource"/>
                <entry key="originDataSource" value-ref="originDataSource"/>
                <entry key="goalDataSource" value-ref="goalDataSource"/>
            </map>
        </property>
    </bean> 
    --> 
    
    <!-- spring和MyBatis完美整合，扫描所有mapper文件-->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />
        <!-- MyBatis 的 XML 配置文件路径 -->
        <property name="configLocation" value="classpath:spring-mybatis/mybatis-context.xml" />
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/web/myapp/module/mapping/dao/*.xml"></property>  
    </bean>
    <!-- 创建originSessionFactory-->
    <bean id="originSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="originDataSource" />
        <property name="configLocation" value="classpath:spring-mybatis/mybatis-context.xml" />
        <property name="mapperLocations" value="classpath:com/web/myapp/module/mapping/dao/*.xml"></property>  
    </bean>  
    <!-- 创建goalSessionFactory-->
    <bean id="goalSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="goalDataSource" />
        <property name="configLocation" value="classpath:spring-mybatis/mybatis-context.xml" />
        <property name="mapperLocations" value="classpath:com/web/myapp/module/mapping/mapper/*.xml"></property>  
    </bean>
  
    <!-- 所有的mapper都继承SqlMapper接口，Spring会自动扫面其DAO接口-->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.web.myapp.module.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.web.myapp.module.dao" />  
        <property name="sqlSessionFactoryBeanName" value="originSessionFactory"></property>  
    </bean> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.web.myapp.module.mapper" />  
        <property name="sqlSessionFactoryBeanName" value="goalSessionFactory"></property>  
    </bean>
    <!--transaction manager, use JtaTransactionManager for global tx    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
    <bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="originDataSource" />  
    </bean> 
    <bean id="transactionManager3" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="goalDataSource" />  
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" />
    <tx:annotation-driven transaction-manager="transactionManager2" />
    <tx:annotation-driven transaction-manager="transactionManager3" />
    <!-- 事物控制 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 只对业务逻辑层实施事务 -->
	<aop:config expose-proxy="true" proxy-target-class="true">
		<aop:pointcut id="txPointcut" expression="execution(* com.web.myapp.user.service..*+.*(..))" />
		<aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
	<!-- 把事务控制在Service层 -->
    <!-- 
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
	   <tx:attributes>
	      <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
	      <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
	      <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
	      <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
	   </tx:attributes>  
	</tx:advice>
	<aop:config>
	   <aop:pointcut id="txPointcut" expression="execution(* com.web.myapp.module.service.*.*(..))"/>
	   <aop:advisor id="txAdvisor" advice-ref="userTxAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	 -->
	<!-- (* com.web.myapp.module.service.*.*(..))中几个通配符的含义：
	第一个 * —— 通配 任意返回值类型
	第二 个 * —— 通配 包com.web.myapp.module.service下的任意class
	第三个 * —— 通配 包com.web.myapp.module.service下的任意class的任意方法
	第四个 .. —— 通配 方法可以有0个或多个参数
	综 上：包com.web.myapp.module.service下的任意class的具有任意返回值类型、任意数目参数和任意名称的方法 -->

</beans>